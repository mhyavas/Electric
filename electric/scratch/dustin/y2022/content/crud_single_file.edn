(ns user
  "Concrete example of minimum viable crud app that demonstrates strong composition
  and realistic architectural constraints"
  (:require
    clojure.string
    #?(:clj [datomic.api :as d])
    [hyperfiddle.api :as hf]
    [hyperfiddle.photon :as p]
    [hyperfiddle.photon-dom :as dom]
    [hyperfiddle.html5 :as-alias html]))

; logical data model

(def fixtures
  [[{:db/ident :person/name :db/valueType :db.type/string :db/cardinality :db.cardinality/one}
    {:db/ident :person/email :db/valueType :db.type/string :db/cardinality :db.cardinality/one :db/unique :db.unique/identity}
    {:db/ident :person/gender :db/valueType :db.type/ref :db/cardinality :db.cardinality/one}
    {:db/ident :person/shirt-size :db/valueType :db.type/ref :db/cardinality :db.cardinality/one}
    {:db/ident :enum/class :db/valueType :db.type/keyword :db/cardinality :db.cardinality/one}]
   [{:enum/class :person/gender :db/ident :person/male}
    {:enum/class :person/gender :db/ident :person/female}]
   [{:db/ident :person/mens-small :person/gender :person/male :enum/class :person/shirt-size}
    {:db/ident :person/mens-medium :person/gender :person/male :enum/class :person/shirt-size}
    {:db/ident :person/mens-large :person/gender :person/male :enum/class :person/shirt-size}
    {:db/ident :person/womens-small :person/gender :person/female :enum/class :person/shirt-size}
    {:db/ident :person/womens-medium :person/gender :person/female :enum/class :person/shirt-size}
    {:db/ident :person/womens-large :person/gender :person/female :enum/class :person/shirt-size}]
   [{:person/email "alice@example.com" :person/gender :person/female :person/shirt-size :person/womens-large}
    {:person/email "bob@example.com" :person/gender :person/male :person/shirt-size :person/mens-large}
    {:person/email "charlie@example.com" :person/gender :person/male :person/shirt-size :person/mens-medium}]])

; business rules, coded in simple Clojure

#?(:clj (def ^:dynamic *db* nil))
#?(:clj (def ^:dynamic *user* nil))

(defn includes-str? [v needle]
  (clojure.string/includes? (.toLowerCase (str v)) (.toLowerCase (str needle))))

(defn persons [needle]
  #?(:clj
     (d/q '[:find [?e ...] :in $ % ?needle :where
            [?e :person/email ?email]
            [(user/includes-str? ?email ?needle)]]
       *db* (or needle ""))))

(defn genders [needle]
  (filter #(includes-str? % needle) [::male ::female]))

(defn shirt-sizes [gender needle]
  #?(:clj
     (d/q '[:in $ % ?gender ?needle :find [?e ...] :where
            [?e :enum/class :person/shirt-size]
            [?e :person/gender ?gender]
            [?e :db/ident ?ident]
            [(user/includes-str? ?ident ?needle)]]
       *db* gender (or needle ""))))

(p/defn App []                                              ; stream function, receives *db* from dynamic scope
  (p/client
    (dom/div
      (dom/h1 "hello world")
      (hf/ui
        {(persons .)
         [:person/name
          :person/email
          {(props :person/gender {::hf/options      (genders)
                                  ::hf/option-label :db/ident
                                  ::hf/render       typeahead-select})
           [:db/ident]}
          {(props :person/shirt-size {::hf/options      (shirt-sizes person/gender .)
                                      ::hf/option-label :db/ident
                                      ::hf/render       typeahead-select})
           [:db/ident]}]}))))

(defn entrypoint [conn]
  #?(:clj
     ; bootstrap client/server and establish websocket
     ; todo each websocket session (browser tab) gets a reactor
     ; todo server push on concurrent database updates
     (p/run api
       (p/server
         (binding [*user* ...]
           (loop [db (d/db conn)]
             (let [tx (binding [*db* db]
                        (p/client
                          (binding [dom/*parent* (js/document.querySelector "#root")]
                            ; App is an incrementally maintained stream-function from stream-of-db to stream-of-tx
                            (App))))]
               (println tx)
               (recur (:db-after @(d/transact conn tx))))))))))

(comment
  (d/create-database "datomic:mem://hello-world")
  (def conn (d/connect "datomic:mem://hello-world"))
  (doall (reduce (fn [_ tx] (d/transact conn tx)) fixtures))

  (def cancel! (entrypoint conn)) ; entrypoint runs process for side effect until cancelled
  (cancel!)
  )
